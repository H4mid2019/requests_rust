# This file is autogenerated by maturin v1.5.0
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          gh extension install actions/gh-actions-cache

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH -L 100 | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}
          REPO: ${{ github.repository }}
          BRANCH: main
  linux:
    runs-on: ubuntu-latest
    needs: cleanup
    strategy:
      matrix:
        target: [x86_64, aarch64, armv7]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'
      - run: sudo apt-get update && sudo apt-get install pkg-config libssl-dev clang -y
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels - ${{ matrix.target }}
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i python3.11
          before-script-linux: |
            sudo apt-get update && sudo apt-get install pkg-config libssl-dev clang -y
            if [ ${{ matrix.target }} != "x86_64" ]; then              
              sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf libssl-dev:armhf pkg-config-arm-linux-gnueabihf libssl-dev:arm64 libssl-dev:armel
              export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc
              export CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc
              export CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++
            fi
      - name: Install x86_64 Build Dependencies
        run: sudo apt-get update && sudo apt-get install pkg-config libssl-dev clang -y
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  windows:
    runs-on: windows-latest
    needs: cleanup
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.target }}
      - name: Build wheels - ${{ matrix.target }}
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  macos:
    runs-on: macos-latest
    needs: cleanup
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/main')
    needs: [linux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
